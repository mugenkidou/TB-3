<Comment>
Copyright (c) 2020, mugenkidou, All Rights Reserved.

<I/O>
input MidiPacket : MIDI input
output MidiSysEx : Output
output String : Parameter Name
output String : Parameter Value

<Description>
Construct Roland style SysEx data TB-3 EFX2.

<Parameter>

<Setup>

<Code>
std::vector<uint8_t> message{0xf0, 0x41, 0x10, 0x00, 0x00, 0x7b, 0x12};
MidiSysEx sysex{0u, nullptr};
struct TB3 {
    std::string name;
    uint8_t cc;
    uint8_t dd;
    uint8_t min;
    uint8_t max;
    uint8_t offset;
    uint8_t length;  // 0:No Output, 1:1Byte, 2:2Bytes
    uint8_t strType; // 0:Number, 1:OFF/ON
};
enum tb3_params {
	KNOB_1 = 0, KNOB_2, KNOB_3, KNOB_4, KNOB_5, KNOB_6, KNOB_7, KNOB_8, // Knob
    EFX_TYPE, FADER_3 = 10, FADER_4, FADER_5, FADER_8 = 15, // Fader
    EFX_SW //Button
};
enum tb3_efx_type {
    BYPASS = 0, CS, DD, RV
};
enum tb3_efx_str {
    NUMBER, OFF_ON, KNEE, POLARITY, TR_TYPE, BPM_SYNC, PAN_TYPE, CHORUS_MODE, PAHSER_TYPE, DD_TYPE, PS_MODE, RV_TYPE
};
const TB3 paramData[] = {
//  Parameter Name       cc    dd min max offset length strType
    {"CS:ATTACK",       0x12, 0x02, 0, 124,  0, 1, NUMBER},      // 1
    {"CS:RELEASE",      0x12, 0x03, 0, 124,  0, 1, NUMBER},      // 2
    {"CS:THRESHOLD",    0x12, 0x04, 0,  40, 20, 1, NUMBER},      // 3
    {"CS:RATIO",        0x12, 0x05, 0,  13,  0, 1, NUMBER},      // 4
    {"CS:KNEE",         0x12, 0x06, 0,   9,  0, 1, KNEE},        // 5
    {"CS:GAIN",         0x12, 0x07, 0,  80, 40, 1, NUMBER},      // 6
    {"",                0xFF, 0xFF, 0,   0,  0, 0, NUMBER},      // 7
    {"CS:DRY/WET",      0x12, 0x08, 0, 100, 50, 1, NUMBER},      // 8

    {"DD:TYPE",         0x12, 0x3F, 0,   2,  0, 1, DD_TYPE},     // 1
    {"DD:TIME",         0x12, 0x40, 0, 100,  0, 1, NUMBER},      // 2
    {"DD:TAP TIME",     0x12, 0x41, 0, 100,  0, 1, NUMBER},      // 3
    {"DD:BPM SYNC",     0x12, 0x42, 0,  20,  0, 1, BPM_SYNC},    // 4
    {"DD:FEEDBACK",     0x12, 0x43, 0, 100,  0, 1, NUMBER},      // 5
    {"DD:LPF",          0x12, 0x44, 0,  14,  0, 1, NUMBER},      // 6
    {"",                0xFF, 0xFF, 0,   0,  0, 0, NUMBER},      // 7
    {"DD:LEVEL",        0x12, 0x45, 0, 100,  0, 2, NUMBER},      // 8

    {"RV:TYPE",         0x12, 0x48, 0,   6,  0, 1, RV_TYPE},     // 1
    {"RV:TIME",         0x12, 0x49, 0,  99,  0, 1, NUMBER},      // 2
    {"RV:PRE DELAY",    0x12, 0x4A, 0, 100,  0, 1, NUMBER},      // 3
    {"RV:HPF",          0x12, 0x4B, 0,  17,  0, 1, NUMBER},      // 4
    {"RV:LPF",          0x12, 0x4C, 0,  14,  0, 1, NUMBER},      // 5
    {"RV:DENSITY",      0x12, 0x4D, 0,  10,  0, 1, NUMBER},      // 6
    {"RV:SPRING SENSE", 0x12, 0x50, 0, 100,  0, 1, NUMBER},      // 7
    {"RV:LEVEL",        0x12, 0x4E, 0, 100,  0, 2, NUMBER},      // 8
};
const TB3 paramData_sw[] = {
    {"CS:SW",           0x12, 0x01, 0,   1,  0, 1, OFF_ON}, 
    {"DD:SW",           0x12, 0x3E, 0,   1,  0, 1, OFF_ON},
    {"RV:SW",           0x12, 0x47, 0,   1,  0, 1, OFF_ON},
};
const TB3 paramData_type = 
    {"EFX2 TYPE",       0x12, 0x00, 0,   3,  0, 1, NUMBER};
const std::string efxTypeStr[] = {"BYPASS", "COMPRESSOR", "DELAY", "REVERB"};
const std::string offOnStr[] = {"OFF", "ON"};
const std::string kneeStr[] = {"Hard", "Soft1", "Soft2", "Soft3", "Soft4", "Soft5", "Soft6", "Soft7", "Soft8", "Soft9"}; //2
const std::string bpmSyncStr[] = {"OFF", "2", "3/2", "4/3", "1", "3/4", "2/3", "1/2", "3/8", "1/3", "1/4", "3/16", "1/6", "1/8", "3/32", "1/12", "1/16", "3/64", "1/24", "1/32", "3/128"};
const std::string ddTypeStr[] = {"SINGLE", "PAN", "STEREO"};
const std::string rvTypeStr[] = {"AMBIENT", "ROOM", "HALL1", "HALL2", "PLATE", "SPRING", "MODULATION"};
const Int EFX_PARAM_NUM = 8;

static Int efxType = 0;

auto noFunction = [](){
    out1 = Midiglue::make_string("-");
    out2 = Midiglue::make_string("-");
};

if (@in0){
    MidiPacket packet = in0;
    if (packet.event_type == Midiglue::MIDIEventType::ControlChange) {
        std::string paramValueStr;
        std::string paramNameStr;
        uint8_t sum = 0;
        uint8_t aa = 0x10;
        uint8_t bb = 0x00;
        uint8_t cc = 0x00;
        uint8_t dd = 0x00;
        uint8_t ee = 0x00;
        uint8_t ff = 0x00;

        Int inputCcNumber = packet.getControlNumber();
        Int inputCcValue = packet.getControlValue();
        cc = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].cc;
        dd = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].dd;

        message.emplace_back(aa);
        message.emplace_back(bb);
        message.emplace_back(cc);
        message.emplace_back(dd);

        if (cc == 0xFF){
            noFunction();
            return;
        }
        switch (inputCcNumber) {
        case EFX_TYPE:
            efxType = (Int)((paramData_type.max + 1) * inputCcValue / 128);
            switch(efxType){
            case 1:
                ee = 1; //CS
                break;
            case 2:
                ee = 8; //CS
                break;
            case 3:
                ee = 9; //CS
                break;
            default:
                break;
            }
            cc = paramData_type.cc;
            dd = paramData_type.dd;
            message[9] = cc;
            message[10] = dd;
            paramNameStr = paramData_type.name;
            message.emplace_back(ee);
            sum = (128 - (aa + bb + cc + dd + ee) % 128);
            paramValueStr = efxTypeStr[efxType];
            break;
        case EFX_SW:
            if (efxType == 0) {
                noFunction();
                return;
            }
            cc = paramData_sw[efxType - 1].cc;
            dd = paramData_sw[efxType - 1].dd;
            message[9] = cc;
            message[10] = dd;
            message.emplace_back(inputCcValue);
            sum = (128 - (aa + bb + cc + dd + inputCcValue) % 128);
            paramNameStr = paramData_sw[efxType - 1].name;
            paramValueStr = offOnStr[inputCcValue];
            break;
        case KNOB_8:
            if (efxType == 0) {
                noFunction();
                return;
            }
            if (efxType == CS){
                ee = (Int)(paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].max + 1) * inputCcValue / 128;
                message.emplace_back(ee);
                sum = (128 - (aa + bb + cc + dd + ee) % 128);
                paramNameStr = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].name;
                paramValueStr = std::to_string(ee - paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].offset);
            } else { // DD, RV
                ee = (Int)(paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].max + 1) * inputCcValue / 128;
                ff = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].max;
                message.emplace_back(ee);
                message.emplace_back(ff);
                sum = (128 - (aa + bb + cc + dd + ee + ff) % 128);
                paramNameStr = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].name;
                paramValueStr = std::to_string(ee - paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].offset);
            }
            break;
        case KNOB_1:
        case KNOB_2:
        case KNOB_3:
        case KNOB_4:
        case KNOB_5:
        case KNOB_6:
        case KNOB_7:
            if (efxType == 0) {
                noFunction();
                return;
            }
            ee = (Int)(paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].max + 1) * inputCcValue / 128;
            message.emplace_back(ee);
            sum = (128 - (aa + bb + cc + dd + ee) % 128);
            paramNameStr = paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].name;
            switch (paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].strType) {
            case 0:
                paramValueStr = std::to_string(ee - paramData[(efxType - 1) * EFX_PARAM_NUM + inputCcNumber].offset);
                break;
            case OFF_ON:
                paramValueStr = offOnStr[ee];
                break;
            case KNEE:
                paramValueStr = kneeStr[ee];
                break;
            case BPM_SYNC:
                paramValueStr = bpmSyncStr[ee];
                break;
            case DD_TYPE:
                paramValueStr = ddTypeStr[ee];
                break;
            case RV_TYPE:
                paramValueStr = rvTypeStr[ee];
                break;
            }
            break;
        default:
            out1 = Midiglue::make_string("-");
            out2 = Midiglue::make_string("-");
            return;
        }
        if (sum == 128) {
            sum = 0;
        }
        message.emplace_back(sum);
        message.emplace_back(0xf7);
        sysex.len = message.size();
        sysex.buf = message.data();
        out0 = sysex;
        out1 = Midiglue::make_string(paramNameStr);
        out2 = Midiglue::make_string(paramValueStr);
    }
}
