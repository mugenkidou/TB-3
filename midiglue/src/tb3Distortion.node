<Comment>
Copyright (c) 2020, mugenkidou, All Rights Reserved.

<I/O>
input MidiPacket : MIDI input
output MidiSysEx : Output
output String : Parameter Name
output String : Parameter Value

<Description>
Construct Roland style SysEx data of TB-3 distortion effect.

<Parameter>

<Setup>

<Code>
std::vector<uint8_t> message{0xf0, 0x41, 0x10, 0x00, 0x00, 0x7b, 0x12};
MidiSysEx sysex{0u, nullptr};
struct TB3 {
    std::string name;
    uint8_t cc;
    uint8_t dd;
    uint8_t min;
    uint8_t max;
    uint8_t offset;
    uint8_t length;  // 0:No Output, 1:1Byte, 2:2Bytes
    uint8_t strType; // 0:Number, 1:OFF/ON
};
const TB3 paramData[] = {
//  Parameter Name        cc    dd  min  max offset length strType
    {"TYPE",            0x0E, 0x01,   0,  24,     0,     1, 2}, // 0 - 24
    {"DRIVE",           0x0E, 0x02,   0, 120,     0,     1, 0}, // 0 - 120
    {"BOTTOM",          0x0E, 0x03,   0, 100,     0,     1, 0}, // 0 - 100
    {"TONE",            0x0E, 0x04,   0, 100,     0,     1, 0}, // 0 - 100
    {"DRT/WET",         0x0E, 0x05,   0, 100,     0,     2, 0} // 0 - 100
};
const TB3 paramData_sw = 
    {"DISTORTION SW",   0x0E, 0x00,   0,   1,     0,     1, 0};

enum tb3_params {
	TYPE = 0, DRIVE, BOTTOM, TONE, DRYWET, DIST_SW = 16
};
const std::string distTypeStr[] = {"Mid Boost", "Clean Boost", "Treble Bst", "Blues OD", "Crunch", "Natural OD", "OD-1", "T-Scream", "Turbo OD", "Warm OD", "Distortion", "Mild DS", "Mid DS", "RAT", "GUV DS", "DST+", "Modern DS", "Solid DS", "Stack", "Loud", "Metal Zone", "Lead", "'60s FUZZ", "Oct FUZZ", "MUFF FUZZ"};
const std::string offOnStr[] = {"OFF", "ON"};

if (@in0){
    MidiPacket packet = in0;
    if (packet.event_type == Midiglue::MIDIEventType::ControlChange) {
        std::string paramValueStr;
        std::string paramNameStr;
        uint8_t sum = 0;
        uint8_t aa = 0x10;
        uint8_t bb = 0x00;
        uint8_t cc = 0x00;
        uint8_t dd = 0x00;
        uint8_t ee = 0x00;
        uint8_t ff = 0x00;

        Int inputCcNumber = packet.getControlNumber();
        Int inputCcValue = packet.getControlValue();

        message.emplace_back(aa);
        message.emplace_back(bb);

        switch (inputCcNumber) {
        case DIST_SW:
            cc = paramData_sw.cc;
            dd = paramData_sw.dd;
            message.emplace_back(cc);
            message.emplace_back(dd);
            message.emplace_back(inputCcValue);
            sum = (128 - (aa + bb + cc + dd + inputCcValue) % 128);
            paramNameStr = paramData_sw.name;
            paramValueStr = offOnStr[inputCcValue];
            break;
        case TYPE:
        case DRIVE:
        case BOTTOM:
        case TONE:
            cc = paramData[inputCcNumber].cc;
            dd = paramData[inputCcNumber].dd;
            ee = (Int)(inputCcValue * paramData[inputCcNumber].max / 127);
            message.emplace_back(cc);
            message.emplace_back(dd);
            message.emplace_back(ee);
            sum = (128 - (aa + bb + cc + dd + ee) % 128);
            paramNameStr = paramData[inputCcNumber].name;
            if (paramData[inputCcNumber].strType == 0) { // display number
                paramValueStr = std::to_string(inputCcValue - paramData[inputCcNumber].offset);
            } else if (paramData[inputCcNumber].strType == 2) { // display DIST TYPE
                paramValueStr = distTypeStr[ee];
            }
            break;
        case DRYWET:
            cc = paramData[inputCcNumber].cc;
            dd = paramData[inputCcNumber].dd;
            ee = (Int)(inputCcValue * paramData[inputCcNumber].max / 127);
            ff = paramData[inputCcNumber].max - ee;
            message.emplace_back(cc);
            message.emplace_back(dd);
            message.emplace_back(ee);
            message.emplace_back(ff);
            sum = (128 - (aa + bb + cc + dd + ee + ff) % 128);
            paramNameStr = paramData[inputCcNumber].name;
            paramValueStr = std::to_string(ee - paramData[inputCcNumber].offset);
            break;
        default:
            out1 = Midiglue::make_string("-");
            out2 = Midiglue::make_string("-");
            return;
        }
        if (sum == 128) {
            sum = 0;
        }
        message.emplace_back(sum);
        message.emplace_back(0xf7);
        sysex.len = message.size();
        sysex.buf = message.data();
        out0 = sysex;
        out1 = Midiglue::make_string(paramNameStr);
        out2 = Midiglue::make_string(paramValueStr);
    }
}
